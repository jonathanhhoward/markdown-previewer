{"version":3,"sources":["components/Editor.js","components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","onChange","text","Card","bg","className","id","Header","Body","as","value","Preview","DANGEROUS","marked","breaks","SAFE","DOMPurify","sanitize","dangerouslySetInnerHTML","__html","App","useState","input","setInput","CardDeck","target","Boolean","window","location","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAwBeA,MArBf,YAAsC,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAC3B,OACE,kBAACC,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,OACVC,GAAG,UAEH,kBAACH,EAAA,EAAKI,OAAN,CAAaF,UAAU,qBAAvB,UAGA,kBAACF,EAAA,EAAKK,KAAN,CACEC,GAAG,WACHJ,UAAU,yBACVC,GAAG,SACHL,SAAUA,EACVS,MAAOR,M,iCCQAS,MArBf,YAA6B,IAATT,EAAQ,EAARA,KACZU,EAAYC,IAAOX,EAAM,CAAEY,QAAQ,IACnCC,EAAOC,IAAUC,SAASL,GAChC,OACE,kBAACT,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,OACVC,GAAG,WAEH,kBAACH,EAAA,EAAKI,OAAN,CAAaF,UAAU,qBAAvB,WAGA,kBAACF,EAAA,EAAKK,KAAN,CACEH,UAAU,yBACVC,GAAG,UACHY,wBAAyB,CAAEC,OAAQJ,O,MCe5BK,MA7Bf,WACE,IADc,EAeYC,mBAdR,oKADJ,mBAePC,EAfO,KAeAC,EAfA,KAqBd,OACE,kBAACC,EAAA,EAAD,CAAUnB,UAAU,2BAClB,kBAAC,EAAD,CAAQH,KAAMoB,EAAOrB,SANzB,YAAoC,IAAXwB,EAAU,EAAVA,OACvBF,EAASE,EAAOf,UAMd,kBAAC,EAAD,CAASR,KAAMoB,MClBDI,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,UD4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2c2d97ed.chunk.js","sourcesContent":["import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nfunction Editor ({ onChange, text }) {\r\n  return (\r\n    <Card\r\n      bg=\"dark\"\r\n      className=\"Card\"\r\n      id=\"Editor\"\r\n    >\r\n      <Card.Header className=\"bg-dark text-info\">\r\n        Editor\r\n      </Card.Header>\r\n      <Card.Body\r\n        as=\"textarea\"\r\n        className=\"bg-light overflow-auto\"\r\n        id=\"editor\"\r\n        onChange={onChange}\r\n        value={text}\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Editor\r\n","import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport marked from 'marked'\r\nimport DOMPurify from 'dompurify'\r\n\r\nfunction Preview ({ text }) {\r\n  const DANGEROUS = marked(text, { breaks: true })\r\n  const SAFE = DOMPurify.sanitize(DANGEROUS)\r\n  return (\r\n    <Card\r\n      bg=\"dark\"\r\n      className=\"Card\"\r\n      id=\"Preview\"\r\n    >\r\n      <Card.Header className=\"bg-dark text-info\">\r\n        Preview\r\n      </Card.Header>\r\n      <Card.Body\r\n        className=\"bg-light overflow-auto\"\r\n        id=\"preview\"\r\n        dangerouslySetInnerHTML={{ __html: SAFE }}\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Preview\r\n","import React, { useState } from 'react'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport Editor from './components/Editor'\r\nimport Preview from './components/Preview'\r\nimport './App.css'\r\n\r\nfunction App () {\r\n  const initialState = `# Header\r\n## Sub header\r\n[Google](https://google.com)\r\ninline \\`code\\`\r\n~~~\r\nBlock code\r\n~~~\r\n* List item\r\n\r\n> Block quote\r\n\r\n![image](favicon.ico)\r\n__Bold text__`\r\n\r\n  const [input, setInput] = useState(initialState)\r\n\r\n  function handleChange ({ target }) {\r\n    setInput(target.value)\r\n  }\r\n\r\n  return (\r\n    <CardDeck className=\"bg-secondary m-0 vh-100\">\r\n      <Editor text={input} onChange={handleChange}/>\r\n      <Preview text={input}/>\r\n    </CardDeck>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.querySelector('#root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}