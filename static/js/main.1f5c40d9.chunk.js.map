{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["INITIAL_MARKDOWN","Editor","props","react_default","a","createElement","Card_default","border","className","id","Header","Body","as","onChange","value","text","Preview","DANGEROUS","marked","breaks","SAFE","DOMPurify","sanitize","dangerouslySetInnerHTML","__html","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","input","target","state","CardDeck_default","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAOMA,SAAmB,sKA8BzB,SAASC,EAAQC,GACf,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,OAAO,OAAOC,UAAU,OAAOC,GAAG,UACtCN,EAAAC,EAAAC,cAACC,EAAAF,EAAKM,OAAN,CAAaF,UAAU,qBAAvB,UACAL,EAAAC,EAAAC,cAACC,EAAAF,EAAKO,KAAN,CAAWC,GAAG,WAAWJ,UAAU,yBAAyBC,GAAG,SACpDI,SAAUX,EAAMW,SAAUC,MAAOZ,EAAMa,QAKxD,SAASC,EAASd,GAChB,IAAMe,EAAYC,IAAOhB,EAAMa,KAAM,CAAEI,QAAQ,IACzCC,EAAOC,IAAUC,SAASL,GAChC,OACEd,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,OAAO,OAAOC,UAAU,OAAOC,GAAG,WACtCN,EAAAC,EAAAC,cAACC,EAAAF,EAAKM,OAAN,CAAaF,UAAU,qBAAvB,WACAL,EAAAC,EAAAC,cAACC,EAAAF,EAAKO,KAAN,CAAWH,UAAU,yBAAyBC,GAAG,UACtCc,wBAAyB,CAAEC,OAAQJ,MAKrCK,kBAzCb,SAAAA,EAAavB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM3B,KAIR+B,aAAe,SAACC,GACdR,EAAKS,SAAS,CAAEC,MAAOF,EAAMG,OAAOvB,SAJpCY,EAAKY,MAAQ,CAAEF,MAAOpC,GAFJ0B,wEAUlB,OACEvB,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAUI,UAAU,2BAClBL,EAAAC,EAAAC,cAACJ,EAAD,CAAQc,KAAMc,KAAKS,MAAMF,MAAOvB,SAAUgB,KAAKI,eAC/C9B,EAAAC,EAAAC,cAACW,EAAD,CAASD,KAAMc,KAAKS,MAAMF,gBAdhBI,IAAMC,WCLJC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAAQC,SAASC,cAAc,UD4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1f5c40d9.chunk.js","sourcesContent":["import React from 'react'\nimport marked from 'marked'\nimport DOMPurify from 'dompurify'\nimport Card from 'react-bootstrap/Card'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport './App.css'\n\nconst INITIAL_MARKDOWN = '# Header\\n' +\n  '## Sub header\\n' +\n  '[Google](https://google.com)\\n' +\n  'inline `code`\\n' +\n  '~~~\\nBlock code\\n~~~\\n' +\n  '* List item\\n\\n' +\n  '> Block quote\\n\\n' +\n  '![image](favicon.ico)\\n' +\n  '__Bold text__\\n'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { input: INITIAL_MARKDOWN }\n  }\n\n  handleChange = (event) => {\n    this.setState({ input: event.target.value })\n  }\n\n  render () {\n    return (\n      <CardDeck className=\"bg-secondary m-0 vh-100\">\n        <Editor text={this.state.input} onChange={this.handleChange}/>\n        <Preview text={this.state.input}/>\n      </CardDeck>\n    )\n  }\n}\n\nfunction Editor (props) {\n  return (\n    <Card border=\"dark\" className=\"Card\" id=\"Editor\">\n      <Card.Header className=\"bg-dark text-info\">Editor</Card.Header>\n      <Card.Body as=\"textarea\" className=\"bg-light overflow-auto\" id=\"editor\"\n                 onChange={props.onChange} value={props.text}/>\n    </Card>\n  )\n}\n\nfunction Preview (props) {\n  const DANGEROUS = marked(props.text, { breaks: true })\n  const SAFE = DOMPurify.sanitize(DANGEROUS)\n  return (\n    <Card border=\"dark\" className=\"Card\" id=\"Preview\">\n      <Card.Header className=\"bg-dark text-info\">Preview</Card.Header>\n      <Card.Body className=\"bg-light overflow-auto\" id=\"preview\"\n                 dangerouslySetInnerHTML={{ __html: SAFE }}/>\n    </Card>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.querySelector('#root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}